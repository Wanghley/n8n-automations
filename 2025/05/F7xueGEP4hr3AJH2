{
  "active": true,
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Data parser",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data parser1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Party identifier",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Category classifier",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Party identifier": {
      "main": [
        [
          {
            "node": "Category classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data parser": {
      "main": [
        [
          {
            "node": "Party identifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Party aggregation to original data": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Party identifier",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Category classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Insert expenses",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Insert income",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Category classifier": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data parser1": {
      "main": [
        [
          {
            "node": "Party identifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Party aggregation to original data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Party aggregation to original data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Party aggregation to original data1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-26T18:29:21.144Z",
  "id": "F7xueGEP4hr3AJH2",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Personal finances",
  "nodes": [
    {
      "parameters": {
        "formTitle": "Bank data update, monthly 2025",
        "formFields": {
          "values": [
            {
              "fieldLabel": "statement",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".csv",
              "requiredField": true
            },
            {
              "fieldLabel": "Bank",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Inter PF"
                  },
                  {
                    "option": "Wells Fargo"
                  },
                  {
                    "option": "Nomad"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Currency",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "BRL (R$)"
                  },
                  {
                    "option": "USD ($)"
                  }
                ]
              }
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {
          "appendAttribution": false,
          "buttonLabel": "Record"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -60,
        340
      ],
      "id": "2af346d2-74af-4d2c-af29-eceef414bf1b",
      "name": "On form submission",
      "webhookId": "a0e39219-5926-4b7a-a942-6334268f6ced"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('On form submission').item.json.Bank }}",
                    "rightValue": "Inter",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "4486bb64-b84a-4b52-8bdd-991d9dde7595"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Inter PF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eab7f207-4a83-43f8-a33d-38b13cc96668",
                    "leftValue": "={{ $('On form submission').item.json.Bank }}",
                    "rightValue": "Wells Fargo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Wells Fargo"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        480,
        340
      ],
      "id": "28eda9af-ad1a-4a70-aac7-2894e270b02f",
      "name": "Switch"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $workflow.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1420,
        460
      ],
      "id": "f724b3fa-3f51-4bfa-bc79-1aafa199fabe",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here are the descriptions and you must return {{ $input.all().length }} different identifiers:\n{{ $input.all().map(item => item.json.Descrição).join(\"\\n\")}}",
        "options": {
          "systemMessage": "You are an AI that extracts the **party name** from a list of transaction descriptions. \nYour task is to **return a JSON array** containing only the **party name** for each description, in the exact order they are provided.\n\nEach **party name** should be concise, specific, and not include any additional information or extra text.\n\nFor example, given the input:\n1. \"Amazon Marketplace Payment\"\n2. \"Starbucks Coffee Purchase\"\n3. \"Google Cloud Services Billing\"\n\nYou should return:\n[\n  \"Amazon Marketplace\",\n  \"Starbucks\",\n  \"Google Cloud\"\n]\n\nReturn only the JSON array. No explanations or extra text. Dont write all uppercase! This must have the same number of elements as the input that is given to you!! Create it entirely!"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1100,
        260
      ],
      "id": "6ac6096e-a31e-41cb-aba0-fda3b9899adf",
      "name": "Party identifier",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "const inputStringParty = $('Party identifier').first().json.output;\nconst inputStringCategory = $input.first().json.output;\n\nconst jsonStringParty = inputStringParty.match(/```json\\n([\\s\\S]*?)\\n```/)[1];\nconst jsonStringCategory = inputStringCategory.match(/```json\\n([\\s\\S]*?)\\n```/)[1];\n\nconst parsedParty = JSON.parse(jsonStringParty);\nconst parsedCategory = JSON.parse(jsonStringCategory);\n\nlet output = [];\n\n// Loop through parsed parties\nfor (let count = 0; count < parsedParty.length; count++) {\n  const party = parsedParty[count];\n  const category = parsedCategory[count];\n\n  const value = parseFloat($('Data parser').all()[count].json['Valor'].replace(\",\",\".\"));\n\n  const balance = parseFloat($('Data parser').all()[count].json['Saldo'].replace(\".\",\"\").replace(\",\",\".\"))\n\n  // Get the raw date string (e.g., \"25/12/2024\")\n  const rawDate = $('Data parser').all()[count].json['Data Lançamento'];\n  \n  // Split the date by \"/\" into [day, month, year]\n  const [day, month, year] = rawDate.split(\"/\");\n  \n  // Reformat to MM/DD/YYYY\n  const formattedDate = `${month}/${day}/${year}`;\n\n\n  // Create custom object\n  const obj = {\n    json: {\n      value: value,\n      isExpense: value<0,\n      category: category,\n      description: $('Data parser').all()[count].json['Descrição'],\n      partyName: party,  // Clean up any whitespace\n      extractedAt: new Date().toISOString(),  // Timestamp\n      accBalance: balance,\n      date: formattedDate,\n      origin: $('On form submission').first().json.Bank,\n      currency: $('On form submission').first().json.Currency.split(\" \")[0]\n    }\n  };\n\n  // Add to output\n  output.push(obj);\n}\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1980,
        -160
      ],
      "id": "bb4f170e-536b-4f9f-8819-ffa16d338779",
      "name": "Party aggregation to original data"
    },
    {
      "parameters": {
        "jsCode": "// 1. Pull in the one incoming item\nconst incoming = $('On form submission').first();\n\n// 2. Verify & detect your binary field name\nif (!incoming.binary || Object.keys(incoming.binary).length === 0) {\n  throw new Error('No binary data found — make sure you wired in a previous node that loads the CSV.');\n}\nconst binKey = Object.keys(incoming.binary)[0];\nconst binData = incoming.binary[binKey].data;\n\n// 3. Decode Base64 → UTF-8 text\nconst csvText = Buffer.from(binData, 'base64').toString('utf8');\n\n// 4. Split into lines, drop first 5, remove any empty trailing lines\nconst lines = csvText\n  .split(/\\r?\\n/)\n  .slice(5)              // drop header+first 4 data lines\n  .filter(line => line); // drop blank lines\n\nif (lines.length === 0) {\n  throw new Error('CSV has no data after dropping the first 5 lines.');\n}\n\n// 5. Extract headers (first row) and remaining rows\nconst headers = lines[0].split(';');\nconst rows = lines.slice(1);\n\n// 6. Map each CSV row to a JSON object\nconst outputItems = rows.map(row => {\n  const cols = row.split(';');\n  const json = {};\n  headers.forEach((h, i) => {\n    json[h.trim()] = cols[i]?.trim() ?? '';\n  });\n  return { json };\n});\n\n// 7. Return each JSON object as its own item\nreturn outputItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        -120
      ],
      "id": "e0db5e1f-9663-45b1-bec6-f59438b50221",
      "name": "Data parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dca585ac-bcd2-4a26-94ec-02190b1e1084",
              "name": "google_sheet_url",
              "value": "https://docs.google.com/spreadsheets/d/1_VMl-HZMiX9qQX6cI6tKjsHSibd_a0gwF7Ddc9ZL8iM/edit?usp=sharing",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        160,
        340
      ],
      "id": "8646f946-be70-421f-96d1-8b703c421494",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": "mistral-saba-24b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1240,
        460
      ],
      "id": "ae2d4b05-d5a8-4b04-96a3-c8dd045fbce1",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "wiJyJHFYEjrlnfDv",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isExpense }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "fc9e8b77-dc59-4aae-b055-2fa8e6dc2f20"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Expense"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6f9034ca-421f-4e88-a77e-b06650605d98",
                    "leftValue": "={{ $json.isExpense }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Income"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2400,
        260
      ],
      "id": "32c90c11-846b-442d-90f7-be0e90153964",
      "name": "Switch1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{\n  $('Data parser').isExecuted\n    ? $('Data parser').all().map(item => item.json.Descrição).join(\"\\n\")\n    : $('Data parser1').all().map(item => item.json.Descrição).join(\"\\n\")\n}}\n",
        "options": {
          "systemMessage": "You are a helpful assistant and you are responsible for based on the description given to you return a json object in order with only the value of what type of operation was complete.\n\nTHOSE ARE THE ONLY ALLOWED CATEGORIES:\n[Carryover Balance]\n[Beginning Balance]\n[Transfer]\nWithdrawal\nDividends\nFinancial Aid\nGifts Received\nInterest Income\nOther Income\nRefunds/Reimbursements\nRental Income\nCredit Card\nWages & Tips\nBills\nFood and drink\nShopping\nPersonal cares\nDonations\nEducation\nEntertainment\nLoan\nSubscription\nTaxes\nMarket\nHealthcare\nServices\nTransportation\nTrip\nPhone & Internet\nOther Expenses\n\n\nJust return the json, nothing else!"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1420,
        260
      ],
      "id": "f25602e5-ba58-43e3-a62a-53558c30a5ec",
      "name": "Category classifier"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1_VMl-HZMiX9qQX6cI6tKjsHSibd_a0gwF7Ddc9ZL8iM/edit?usp=sharing",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": 780802789,
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_VMl-HZMiX9qQX6cI6tKjsHSibd_a0gwF7Ddc9ZL8iM/edit#gid=780802789"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.date }}",
            "Value": "={{ $json.value }}",
            "Party": "={{ $json.partyName }}",
            "Notes": "={{ $json.description }}",
            "Category": "={{ $json.category }}",
            "Origin": "={{ $json.origin }}",
            "Currency": "={{ $json.currency }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Currency",
              "displayName": "Currency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Value",
              "displayName": "Value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Party",
              "displayName": "Party",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Origin",
              "displayName": "Origin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": false
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2960,
        20
      ],
      "id": "256d6980-103f-4081-b8b4-59b4c4144679",
      "name": "Insert expenses",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Dn6QJHcIoD5uZ1vg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1_VMl-HZMiX9qQX6cI6tKjsHSibd_a0gwF7Ddc9ZL8iM/edit?usp=sharing",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": 1053872170,
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_VMl-HZMiX9qQX6cI6tKjsHSibd_a0gwF7Ddc9ZL8iM/edit#gid=1053872170"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.date }}",
            "Value": "={{ $json.value }}",
            "Party": "={{ $json.partyName }}",
            "Notes": "={{ $json.description }}",
            "Category": "={{ $json.category }}",
            "Origin": "={{ $json.origin }}",
            "Currency": "={{ $json.currency }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Currency",
              "displayName": "Currency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Value",
              "displayName": "Value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Party",
              "displayName": "Party",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Origin",
              "displayName": "Origin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": false
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2940,
        480
      ],
      "id": "b07f0330-5462-4bab-8c83-324b755a05ee",
      "name": "Insert income",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Dn6QJHcIoD5uZ1vg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Pull in the one incoming item\nconst incoming = $('On form submission').first();\n\n// 2. Verify & detect your binary field name\nif (!incoming.binary || Object.keys(incoming.binary).length === 0) {\n  throw new Error('No binary data found — make sure you wired in a previous node that loads the CSV.');\n}\nconst binKey = Object.keys(incoming.binary)[0];\nconst binData = incoming.binary[binKey].data;\n\n// 3. Decode Base64 → UTF-8 text\nconst csvText = Buffer.from(binData, 'base64').toString('utf8');\n\n// 4. Split into lines, drop first 5, remove any empty trailing lines\nconst lines = csvText\n  .split(/\\r?\\n/)\n  .filter(line => line); // drop blank lines\n\nif (lines.length === 0) {\n  throw new Error('CSV has no data after dropping the first 5 lines.');\n}\n\n// 5. Extract headers (first row) and remaining rows\nconst headers = [\"Date\",\"value\",\"*\",\"*\",\"Descrição\"]\nconst rows = lines\n\n// 6. Map each CSV row to a JSON object\nconst outputItems = rows.map(row => {\n  const cols = row.split(',');\n  const json = {};\n  headers.forEach((h, i) => {\n    json[h.trim()] = cols[i]?.trim() ?? '';\n  });\n  return { json };\n});\n\n// 7. Return each JSON object as its own item\nreturn outputItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        820
      ],
      "id": "99f904f4-070c-4820-b37f-9b54f3e777d3",
      "name": "Data parser1"
    },
    {
      "parameters": {
        "jsCode": "const inputStringParty = $('Party identifier').first().json.output;\nconst inputStringCategory = $('Category classifier').first().json.output;\n\nconst jsonStringParty = inputStringParty.match(/```json\\n([\\s\\S]*?)\\n```/)[1];\nconst jsonStringCategory = inputStringCategory.match(/```json\\n([\\s\\S]*?)\\n```/)[1];\n\nconst parsedParty = JSON.parse(jsonStringParty);\nconst parsedCategory = JSON.parse(jsonStringCategory);\n\nlet output = [];\n\nconsole.log(parsedParty,parsedCategory)\n\n// Loop through parsed parties\nfor (let count = 0; count < parsedParty.length; count++) {\n  const party = parsedParty[count];\n  const category = parsedCategory[count];\n\n  console.log($('Data parser1').all()[count].json['value'])\n\n  const value = parseFloat($('Data parser1').all()[count].json['value'].replaceAll('\"',''));\n\n  console.log($('Data parser1').all()[count].json['Date'])\n  // Get the raw date string (e.g., \"25/12/2024\")\n  const rawDate = $('Data parser1').all()[count].json['Date'].replaceAll('\"','');\n\n\n  // Create custom object\n  const obj = {\n    json: {\n      value: value,\n      isExpense: value<0,\n      category: category,\n      description: $('Data parser1').all()[count].json['Descrição'],\n      partyName: party,  // Clean up any whitespace\n      extractedAt: new Date().toISOString(),  // Timestamp\n      date: rawDate,\n      origin: $('On form submission').first().json.Bank,\n      currency: $('On form submission').first().json.Currency.split(\" \")[0]\n    }\n  };\n\n  // Add to output\n  output.push(obj);\n}\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        780
      ],
      "id": "639d1539-76fb-4275-9f01-801bd219a1bc",
      "name": "Party aggregation to original data1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('On form submission').first().json.Bank }}",
                    "rightValue": "Inter PF",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "4486bb64-b84a-4b52-8bdd-991d9dde7595"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Inter PF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eab7f207-4a83-43f8-a33d-38b13cc96668",
                    "leftValue": "={{ $('On form submission').first().json.Bank }}",
                    "rightValue": "Wells Fargo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Wells Fargo"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1780,
        260
      ],
      "id": "d5afbf0f-e0cd-4147-905a-214d62b5a37c",
      "name": "Switch2"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 1120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        920,
        180
      ],
      "typeVersion": 1,
      "id": "ae5285fa-9f01-4c4b-a12f-55297f8fcd0d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Inter Bank processing",
        "height": 360,
        "width": 1600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        -240
      ],
      "typeVersion": 1,
      "id": "91bc34f4-4cfa-49d9-98dc-68590582731b",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Wells Fargo Bank processing",
        "height": 360,
        "width": 1600,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        660
      ],
      "typeVersion": 1,
      "id": "5e70069a-5596-4378-986e-ae4340fce10a",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "height": 2260,
        "width": 3740
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -280,
        -660
      ],
      "typeVersion": 1,
      "id": "49b1e96d-f707-4fea-b79c-eec8e7840778",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-automations",
  "repo_owner": "wanghley",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "timeSavedPerExecution": 20
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-01T20:24:57.496Z",
  "versionId": "c0b430e6-7137-4c9e-8cc4-1cfddc0a10a0"
}